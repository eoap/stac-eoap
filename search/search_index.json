{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Platforms for the exploitation of Earth Observation (EO) data have been developed by public and private companies in order to foster the usage of EO data and expand the market of Earth Observation-derived information. A fundamental principle of the platform operations concept is to move the EO data processing service\u2019s user to the data and tools, as opposed to downloading, replicating, and exploiting data \u2018at home\u2019. In this scope, previous OGC activities initiated the development of an architecture to allow the ad-hoc deployment and execution of applications close to the physical location of the source data with the goal to minimize data transfer between data repositories and application processes.</p> <p>The OGC published the Best Practice for Earth Observation Application Package, a document defining the Best Practice to package and deploy Earth Observation Applications in an Exploitation Platform. The document is targeting the implementation, packaging and deployment of EO Applications in support of collaborative work processes between developers and platform owners.</p> <p>The Best Practice includes recommendations for the application design patterns, package encoding, container and data interfaces for data stage-in and stage-out strategies focusing on three main viewpoints: Application, Package and Platform.</p> <p>The focus of documentation set in on data interfaces for data stage-in and stage-out strategies.</p>"},{"location":"#earth-observation-applications","title":"Earth Observation Applications","text":"<p>Earth Observation Applications typically offer functions that perform data operations like processing / reprocessing, projection, visualization or analysis. The applications can be written in a variety of coding languages (e.g. Python, R, Go, Java, C++, C#, shell scripts) and make use of specific software libraries (e.g. SNAP, GDAL, Orfeo Toolbox).</p> <p>In the context of the Best Practice for Earth Observation Application Package, the application is treated as a black-box that according to its application design pattern must comply with data stage-in and data stage-out mechanisms defined.</p>"},{"location":"#staging-input-and-output-eo-products","title":"Staging Input and Output EO Products","text":"<p>EO product files come in different formats (e.g. GeoTIFF, HDF5, SAFE) and might have sub-items (e.g. metadata, bands, masks) that can be encoded in the same file or follow a given folder structure.</p> <p>For example, SENTINEL-2 products are made available to users in the SENTINEL-SAFE format, including image data in JPEG2000 format, quality indicators (e.g. defective pixels mask), auxiliary data and metadata. The SAFE format wraps a folder containing image data in a binary data format and product metadata in XML. A SENTINEL-2 product refers to a directory folder that contains a collection of information that can include several files.</p> <p>A main concern application developers face is the different approaches through which the products are made available (i.e. stage-in) to the applications. For example, applications might find the same exact folder structure and return the folder root or the main XML manifest file or have the folder structure compressed in a single archive file.</p> <p>In general, the onus of navigating the input folder directory and programmatically reacting to how the file was staged-in by the platform is on application and the application developer needs to consider all possible cases when developing their read routines.</p> <p>Conversely, the outputs of the application are fully managed by the developer that places the resulting files in an output directory. The only information the platform might receive about the output files is the file media type (formerly known as \u201cMIME-type\u201d) and is often missing critical information like spatial footprint, sub-items (e.g. masks, bands) and additional metadata (e.g. ground sample distance, orbit direction).</p> <p>A good solution to represent the data manifest for input and output products is brought by the SpatioTemporal Asset Catalog (STAC).</p>"},{"location":"#spatiotemporal-asset-catalog-stac","title":"SpatioTemporal Asset Catalog (STAC)","text":"<p>The STAC specification standardizes the way geospatial assets are exposed online and queried. A \u2018spatiotemporal asset\u2019 is any file that represents information about the earth captured in a certain space and time (e.g. satellites, planes, drones, balloons).</p> <p>The STAC specification defines several objects:</p> <ul> <li>STAC Catalog: STAC Catalog is a collection of STAC Items or other STAC Catalogs (sub-catalogs). The division of sub-catalogs is transparently managed by links to ease online browsing.</li> <li>STAC Collection: extends the STAC Catalog with additional fields to describe a whole set of STAC Items that share properties and metadata. STAC Collections are meant to be compatible with OGC API\u2009\u2014\u2009Features Collections (OGC 17-069r3).</li> <li>STAC Item: a GeoJSON Feature with additional fields (e.g. time, geo), links to related entities and STAC Assets.</li> <li>STAC Asset: is an object that contains a link to data associated with the STAC Item that can be downloaded or streamed (e.g. data, metadata, thumbnails) and can contain additional metadata. Similar to atom:link it has properties like href, title, description, type and roles; but, most significantly, it allows relative paths.</li> </ul> <p>Most importantly the STAC specification can be implemented in a completely \u2018static\u2019 manner as flat local files located near the data enabling the application to access products assets (e.g. JPEG 2000 band file, auxiliary data, browse) with a relative path (something that was not possible using OpenSearch as defined by OGC 13-026r8, OGC 13-032r8).</p> <p>The Best Practice for Earth Observation Application Package selected a STAC Catalog with STAC Item files as the data manifests format, for application that require staging input data and/or output results.</p>"},{"location":"application-data-flow/","title":"Application data flow management","text":""},{"location":"application-data-flow/#stage-in","title":"Stage-in","text":"<p>From the OGC Best Practice for Earth Observation Application Package:</p> <p>An Application input argument that requires staged EO product files SHALL be defined as an argument that points to a folder where a STAC Catalog, named catalog.json, contains a list of one or more STAC Items and associated STAC Assets referencing the files.</p> <p>This translates to:</p> <ul> <li>A platform running this application will plug a stage-in step for all workflow steps having inputs of type <code>Directory</code></li> <li>Workflow steps having inputs of type <code>Directory</code> will find a STAC catalog.json file</li> </ul>"},{"location":"application-data-flow/#stage-out","title":"Stage-out","text":"<p>From the OGC Best Practice for Earth Observation Application Package:</p> <p>An Application that creates EO product files to be stage-out SHALL generate a valid STAC Catalog, named catalog.json, and include the STAC Item(s) and corresponding STAC Assets pointing to the results of the processing.</p> <p>The STAC Catalog created by the Application SHALL include metadata elements for each STAC Item with at least their spatial (geometry, box) and temporal (datetime) properties.</p> <p>This translates to:</p> <ul> <li>Workflow steps that have an output of type <code>Directory</code> produce a STAC catalog</li> <li>A platform running this application will plug a stage-out step for all workflow outputs of type Directory</li> </ul>"},{"location":"definitions/","title":"Definitions","text":"<p>The Best Practice for Earth Observation Application Package addresses data flow management of the input and output EO Products files by defining rules for the data stage-in and data stage-out for Applications that require staged files and/or generate files that need to be staged-out.</p>"},{"location":"definitions/#data-stage-in-definition","title":"Data stage-in definition","text":"<p>Data stage-in is the process to retrieve the inputs and make these available for the processing. Processing inputs are provided as catalogue references and the Platform is responsible for translating those references into inputs available as files for the local processing.</p>"},{"location":"definitions/#data-stage-out-definition","title":"Data stage-out definition","text":"<p>Data stage-out is the process to upload the output files generated by the processing onto external system(s), and make them available for later usage. The Platform retrieves the processing outputs and automatically stores them onto an external persistent storage. Additionally, the Platform should publish the metadata of the outputs onto a Catalogue and provide their references as an output.</p>"},{"location":"definitions/#application-data-flow-management","title":"Application Data Flow Management","text":"<p>The Application data flow management relies on the rules:</p> <ul> <li> <p>The computational workflow data interfaces use the Spatio Temporal Asset Catalog (STAC) to describe the EO data inputs and generated results</p> </li> <li> <p>Stage-in</p> <ul> <li>All input parameters of the CWL <code>ComandLineTool</code> that require the staging of EO products shall be of type <code>Directory</code>. </li> <li>All input parameters of the CWL <code>Workflow</code> that require the staging of EO products shall be of type <code>Directory</code>.</li> <li>Applications find a STAC <code>catalog.json</code> file</li> </ul> </li> <li> <p>Stage-out</p> <ul> <li>Applications produce a STAC <code>catalog.json</code> in all outputs of type Directory</li> <li>The outputs field of the <code>Workflow</code> that requires the stage-out of the generated products shall be of type <code>Directory</code>.</li> </ul> </li> </ul>"},{"location":"definitions/#platform-data-flow-management","title":"Platform Data Flow Management","text":"<p>A Platform is responsible for the data flow management by using a local catalogue encoded using the SpatioTemporal Asset Catalog (STAC) specification as a data manifest for application inputs and outputs.</p> <p>The local catalogue provides knowledge about the input and output files data contents like spatial footprint, sub-items (e.g. masks, bands) and additional metadata.</p>"},{"location":"definitions/#wrapping-the-application-package","title":"Wrapping the Application Package","text":"<p>Wrap an Application Package: * plug a stage-in step for all workflow inputs of type Directory * plug a stage-out step for all workflow outputs of type Directory</p> <p>The outcome is a wrapped CWL workflow that takes: * the application package parameters * any stage-in/stage-out parameters the platform may need to perform these operations</p>"},{"location":"hands-on/","title":"Hands-on","text":""},{"location":"hands-on/#reading-data-staged-in","title":"Reading data staged-in","text":"<p>Open notebook \"01 EO Products as Input Data.ipynb\" to run a hands-on exercise on reading staged data.</p>"},{"location":"hands-on/#inspecting-results-to-be-staged-out","title":"Inspecting results to be staged-out","text":"<p>Open notebook \"02 EO Products as Output Data.ipynb\" to run a hands-on exercise on inspecting results to be staged-out</p>"},{"location":"hands-on/#running-individual-command-line-tools-for-data-stage-in-application-and-results-stage-out","title":"Running individual command-line tools for data stage-in, application and results stage-out","text":"<p>Open notebook \"03 Platform Data Management CLI.ipynb to run individual command-line tools for data stage-in, application and results stage-out</p>"},{"location":"hands-on/#running-individual-command-line-tools-for-data-stage-in-application-and-results-stage-out-with-cwl","title":"Running individual command-line tools for data stage-in, application and results stage-out with CWL","text":"<p>Open notebook \"04 Platform Data Management CWL.ipynb\" to run individual command-line tools for data stage-in, application and results stage-out with CWL</p>"},{"location":"hands-on/#wrapping-an-application-package-using-eoepcas-cwl-wrapper","title":"Wrapping an Application Package using EOEPCA's cwl-wrapper","text":"<p>Open notebook \"05 Platform Data Management Application Wrapping.ipynb\" to wrap an Application Package using EOEPCA's cwl-wrapper</p>"},{"location":"platform-data-flow/","title":"Platform data flow management","text":"<p>For the data stage-in, the Platform creates a local STAC Catalog with a STAC Item whose Assets have an accessible href (either local or remote e.g. COG) as the input files manifest for the application.</p> graph TB style AA stroke:#f66,stroke-width:3px subgraph stage-in A[STAC Item] -- STAC Item URL --&gt; AA[Stage-in] AA[Stage-in] -- catalog.json/item.json/assets blue, red,  nir ... --&gt; AB[(local storage)] end subgraph EO Application AB[(storage)] -- Staged STAC Catalog --&gt; APP[read STAC Catalog] end <p>For the data stage-out, the Application creates a local STAC Catalog as the output files manifest describing the results metadata and assets\u2019 location thus enabling the Platform to provide the processing results in the OGC API\u2009\u2014\u2009Processes response.</p> graph TB style BB stroke:#f66,stroke-width:3px subgraph EO Application APP[EO application] APP -.-&gt; F[Create STAC Catalog] F -.-&gt; G[(storage)] end subgraph stage-out G -- \"catalog.json/item.json\" --&gt; BB[Stage-out]  BB --&gt; H[(\"Remote   storage\")] end"},{"location":"platform-data-flow/#example","title":"Example","text":"<p>The data flow management concepts mapped to the a Water Body Detection application are depicted below.</p> graph TB style AA stroke:#f66,stroke-width:3px style BB stroke:#f66,stroke-width:3px subgraph stage-in A[STAC Item] -- STAC Item URL --&gt; AA[Stage-in] AA[Stage-in] -- catalog.json/item.json/assets blue, red,  nir ... --&gt; AB[(local storage)] end subgraph Process STAC item AB[(storage)] -- Staged STAC Catalog --&gt; B AB[(storage)] -- Staged STAC Catalog --&gt; C AB[(storage)] -- Staged STAC Catalog --&gt; F subgraph scatter on bands B[\"crop(green)\"]; C[\"crop(nir)\"]; end B[\"crop(green)\"] -.-&gt; D[Normalized difference]; C[\"crop(nir)\"] -.-&gt; D[Normalized difference]; D -.-&gt; E[Otsu threshold] end E -.-&gt; F[Create STAC Catalog] F -.-&gt; G[(storage)]  subgraph stage-out  G -- \"catalog.json/item.json/asset otsu.tif\" --&gt; BB[Stage-out]  BB --&gt; H[(\"Remote   storage\")] end"}]}